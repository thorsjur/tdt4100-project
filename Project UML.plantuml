@startuml Chess
title Chess


enum ChessColours {
    WHITE
    BLACK
    String toString()
}

class Move {
    -Pair<int row, int col> fromCoordinate
    -Pair<int row, int col> toCoordinate
    +boolean isValidMove(Move move)
    +String toString()

}

class Board {
    -List<ArrayList<Piece>> grid
    -Board previousBoard
    -Board nextBoard
    +boolean makeMove(Move move)
    +Piece getPiece(Pair<int row, int col> coordinate)
    +void castle(Piece piece)
    +Board goToNextBoard()
    +Board goToPreviousBoard()
    +String toString()
    -boolean checkBoardForCheck()
    -boolean checkBoardForMate()
    -boolean checkBoardForPawnPromotion()
    -boolean checkBoardForStaleMate()
    -List<Pair<int row, int col>> getThreatenedSquares(char colour)
    -void setPiece(Pair<int row, int col> coordinate)
    -Piece removePiece(Pair<int row, int col> coordinate)
    

}

class Game {
    -Board board
    -Calendar date
    -String playerOne
    -String playerTwo
    -List<Move> moves
    +Board getBoard()
    +Date getDate()
    +String getPlayerOne()
    +String getPlayerTwo()
    +List<Move> getMoves()
    +void stepBackward()
    +void stepForward()
    +boolean checkBoardState()

}

abstract class Piece {
    -char colour
    -Pair<int row, int col> coordinate
    -Board board
    + {abstract} List<Move> getLegalMoves()
    + {abstract} Piece getType()
    +char getColour()
    
}

class Rook extends Piece {
    -boolean moved
}

class Pawn extends Piece {

}

class Bishop extends Piece {
    
}

class Knight extends Piece {

}

class King extends Piece {
    -boolean moved
}

class Queen extends Piece {

}

Game --> "*" Move
Game --> "1:1" Board
Board "1:1"  -- "2:32" Piece
Board -- Board



@enduml